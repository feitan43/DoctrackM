import React, {useRef, useState, useEffect, useCallback} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ActivityIndicator,
  Alert,
  Platform,
  Linking,
  SafeAreaView,
} from 'react-native';
import {Camera, useCameraDevice, useCameraPermission} from 'react-native-vision-camera';
import Icon from 'react-native-vector-icons/Ionicons'; // Assuming you have this installed

const CameraView = ({onPhotoTaken, onClose}) => {
  const camera = useRef(null);
  const device = useCameraDevice('back'); // Use the back camera
  const {hasPermission, requestPermission} = useCameraPermission();

  const [isCapturing, setIsCapturing] = useState(false);

  // Request permissions when the component mounts if not already granted
  useEffect(() => {
    if (!hasPermission) {
      requestPermission();
    }
  }, [hasPermission, requestPermission]);

  const handleRequestPermission = useCallback(async () => {
    const granted = await requestPermission();
    if (!granted) {
      Alert.alert(
        'Permission Denied',
        'Camera access is required to take photos. Please enable it in your device settings.',
        [
          {text: 'Cancel', style: 'cancel'},
          {text: 'Open Settings', onPress: () => Linking.openSettings()},
        ],
      );
    }
  }, [requestPermission]);

  const takePhoto = useCallback(async () => {
    if (camera.current == null || isCapturing) {
      return;
    }

    setIsCapturing(true);
    try {
      const photo = await camera.current.takePhoto({
        qualityPrioritization: 'speed', // Prioritize speed of capture
        flash: 'off', // 'on', 'off', 'auto'
        enableShutterAndAutoFocusing: true,
      });

      // photo.path contains the local file URI
      const photoUri = `file://${photo.path}`;
      onPhotoTaken(photoUri);
    } catch (e) {
      console.error('Failed to take photo:', e);
      Alert.alert('Error', 'Failed to take photo. Please try again.');
    } finally {
      setIsCapturing(false);
    }
  }, [isCapturing, onPhotoTaken]);

  if (device == null) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#007BFF" />
        <Text style={styles.loadingText}>Camera not available or loading...</Text>
        <TouchableOpacity style={styles.closeButton} onPress={onClose}>
          <Icon name="close" size={30} color="#FFFFFF" />
        </TouchableOpacity>
      </View>
    );
  }

  if (!hasPermission) {
    return (
      <View style={styles.permissionContainer}>
        <Text style={styles.permissionText}>Camera access required.</Text>
        <TouchableOpacity style={styles.permissionButton} onPress={handleRequestPermission}>
          <Text style={styles.permissionButtonText}>Grant Camera Access</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.closeButton} onPress={onClose}>
          <Icon name="close" size={30} color="#FFFFFF" />
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <Camera
        ref={camera}
        style={StyleSheet.absoluteFill}
        device={device}
        isActive={true} // Camera is active when this component is rendered
        photo={true} // Enable photo capture
      />

      <View style={styles.controls}>
        <TouchableOpacity style={styles.closeButtonOverlay} onPress={onClose}>
          <Icon name="close" size={30} color="#FFFFFF" />
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.captureButton}
          onPress={takePhoto}
          disabled={isCapturing} // Disable button while capturing
          accessibilityLabel="Take Photo">
          {isCapturing ? (
            <ActivityIndicator size="small" color="#007BFF" />
          ) : (
            <Icon name="camera-outline" size={40} color="#FFFFFF" />
          )}
        </TouchableOpacity>
        <View style={styles.filler} />
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'black',
    justifyContent: 'center',
    alignItems: 'center',
  },
  permissionContainer: {
    flex: 1,
    backgroundColor: 'black',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  permissionText: {
    color: 'white',
    fontSize: 18,
    textAlign: 'center',
    marginBottom: 20,
  },
  permissionButton: {
    backgroundColor: '#007BFF',
    paddingVertical: 12,
    paddingHorizontal: 25,
    borderRadius: 8,
  },
  permissionButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  loadingText: {
    color: 'white',
    marginTop: 10,
  },
  controls: {
    position: 'absolute',
    bottom: 0,
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
    paddingVertical: 20,
    backgroundColor: 'rgba(0, 0, 0, 0.5)', // Semi-transparent background for controls
  },
  closeButtonOverlay: {
    position: 'absolute',
    top: Platform.OS === 'ios' ? 40 : 20, // Adjust for notch/status bar
    left: 20,
    zIndex: 10, // Ensure it's above camera view
    padding: 10,
    backgroundColor: 'rgba(0,0,0,0.3)',
    borderRadius: 25,
  },
  captureButton: {
    width: 70,
    height: 70,
    borderRadius: 35,
    backgroundColor: '#FFFFFF',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 5,
    borderColor: '#007BFF',
  },
  filler: {
    width: 50, // To balance the layout if you add more controls
  },
});

export default CameraView;